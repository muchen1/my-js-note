
/**
 * @file 操作符
 * @author  muchen1
 */

/**
 * 一元操作符。用来操作一个操作数的操作符，即为一元操作符
 */
// ++,--
var num1 = 2;
var num2 = 20;
var num3 = --num1 + num2;  // 21
var num4 = num1 + num2;    // 21

var num1 = 2;
var num2 = 20;
var num3 = num1-- + num2;  // 22
var num4 = num1 + num2;    // 21

// +,-:用于类型的转换,与Number()函数转化规则相同
var s1 = '01';
+s1;  // 1
-s1;  // -1

/**
 * 位操作符，即在最基本的层次上，按内存中表示数值的位来操作数值
 * ECMAScript存储方式是64位，但位操作是32位。后台会先把64位转换为32位，对32位操作完成后，再转换为
 * 64位，这个转化有一个问题，即在对NaN和Infinity值应用位操作时，这两个值会当作0处理
 * 位操作因为是在最底层，所以执行起来比较快
 */
// 按位非(not)~,结果就是返回数值的反码
var num1 = 25;  // 000000000000000000000000011001
var num2 = ~num1;  // 111111111111111111111111100110
console.log(num2);  // -26,按位非的实质，操作数的负值减1

// 按位与(AND)&,将操作数转化为2进制后，对其各位，若都为1，则返回1；否则返回0

// 按位或(OR)|,将操作数转化为2进制后，将其对齐，若有1，则返回1；都位0时则返回0

// 按位异或(XOR)^,将操作数转化为2进制后，将其对齐，若相对应的一样，则返回0；若返回的不一样，则返回1

// 左移（<<）,将数值的所有位向左移动指定的位数
var oldValue = 2;    // 等于二进制的10
var newValue = oldValue << 5;  // 等于二进制的1000000
// 左移没有涉及到符号，移动后空出的位置用0填充

// 有符号的右移(>>),这个操作数将值向右移动，但保留符号位(符号位不动，最左边那个值)
var oldValue = 64;    // 等于二进制的1000000
var newValue = oldValue >> 5;  // 等于二进制的10
// 右移后空出的位置，用符号位的值来填充，可能是1，可能是0

// 无符号的右移(>>>)，这个操作数将值向右移动，不保留符号位
var oldValue = -64;  // 等于二进制的11111111111111111111111111000000
var newValue = oldValue >>> 5;   // 等于十进制的 134217726
// 右移后的空位置用0来填充










